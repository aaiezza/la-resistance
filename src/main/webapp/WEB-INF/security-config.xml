<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                            http://www.springframework.org/schema/security
                            http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!-- For authentication: user-search-filter: the attribute name that contains 
		the user name user-search-base: the base path where to find user information 
		For authorization: group-search-filter: the attribute name that contains 
		the full dn of a user group-search-base: the base path where to find role 
		information group-role-attribute: the attribute name that contains the role 
		type role-prefix: the prefix to be added when retrieving role values For 
		server access: manager-dn: the full dn of the person that has access to an 
		LDAP server manager-password: the password of the person that has access 
		to an LDAP server -->

	<!-- authentication-manager> <ldap-authentication-provider user-search-filter="(uid={0})" 
		user-search-base="ou=users" group-search-filter="(uniqueMember={0})" group-search-base="ou=groups" 
		group-role-attribute="cn" role-prefix="ROLE_"> </ldap-authentication-provider> 
		</authentication-manager -->

	<!-- REAL LDAP server -->

	<!-- ldap-server url="ldap://localhost:10389/o=mojo" manager-dn="uid=admin,ou=system" 
		manager-password="secret" / -->

	<!-- EMBEDDED LDAP -->

	<!-- ldap-server ldif="resources/mojo.ldif" root="o=mojo"/ -->

	<!-- JDBC -->
	<authentication-manager alias="authMan">
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="SELECT username,password, enabled FROM users WHERE username=?"
				authorities-by-username-query="SELECT username, role FROM user_role WHERE username =?  " />
		</authentication-provider>
	</authentication-manager>

	<global-method-security 
		authentication-manager-ref="authMan" />

	<!-- If You don't want to use LDAP and can define all your users here, you 
		can use this. -->
	<!-- authentication-manager> <authentication-provider> <user-service> <user 
		name="Alex" password="password" authorities="ROLE_USER, ROLE_ADMIN"></user> 
		<user name="resist" password="password" authorities="ROLE_USER"></user> </user-service> 
		</authentication-provider> </authentication-manager -->

	<!-- Make resources not need security -->
	<http auto-config="true" security="none" pattern="/css/**" />
	<http auto-config="true" security="none" pattern="/js/**" />
	<http auto-config="true" security="none" pattern="/images/**" />

	<http auto-config="true" security="none" pattern="/login*" />
	<http auto-config="true" security="none" pattern="/signup*"/>
	<http auto-config="true" security="none" pattern="/vote*" />

	<!-- Paths that need securing -->
	<http auto-config="true">
		<intercept-url pattern="/results*" access="ROLE_ADMIN" />
		<intercept-url pattern="/userManagement*" access="ROLE_ADMIN" />
		<intercept-url pattern="/profile*" access="ROLE_USER" />
		<intercept-url pattern="/**" access="ROLE_USER" />

		<form-login login-page="/login" username-parameter="username"
			password-parameter="password" always-use-default-target="true"
			default-target-url="/profile" authentication-failure-url="/login?authfailed" />
		<logout logout-success-url="/login?logout" />

	</http>

</beans:beans>

